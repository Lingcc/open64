/* Linker script for normal executables with text data and BSS in hugepages */
OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
	      "elf64-x86-64")
OUTPUT_ARCH(i386:x86-64)
ENTRY(_start)
SEARCH_DIR("/usr/x86_64-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
/* Do we need any of these for elf?
   __DYNAMIC = 0;    */
PHDRS
{
  headers PT_PHDR PHDRS ;
  interp PT_INTERP ;
  htext PT_LOAD FILEHDR PHDRS FLAGS (0x00100005);
  hdata PT_LOAD FLAGS (0x00100007);
  dynamic PT_DYNAMIC ;
  note PT_NOTE ;
  gnu_stack PT_GNU_STACK ;
  /* this is the value of PT_GNU_EH_FRAME as defined in
     usr/include/elf.h but binutils does not recognize that identifier
     as it does other PT_ constants. */
  eh_frame_hdr 1685382480 FLAGS (0x00000004);
}
SECTIONS
{
  /* Read-only sections, merged into text segment: */
  /* Different from the normal origin address, because we make it 16MB
   * aligned, in case of future larger hugepages */
  __executable_start = 0x1000000; . = 0x1000000 + SIZEOF_HEADERS;
  .interp         : { *(.interp) } :interp :htext
  .hash           : { *(.hash) } :htext
  .note.SuSE      : { *(.note.SuSE) } :htext :note
  .note.ABI-tag   : { *(.note.ABI-tag) } :htext :note
  .note.gnu.build-id : { *(.note.gnu.build-id) } :htext :note
  .dynsym         : { *(.dynsym) } :htext
  .dynstr         : { *(.dynstr) } :htext
  .gnu.version    : { *(.gnu.version) } :htext
  .gnu.version_d  : { *(.gnu.version_d) } :htext
  .gnu.version_r  : { *(.gnu.version_r) } :htext
  .rel.init       : { *(.rel.init) } :htext
  .rela.init      : { *(.rela.init) } :htext
  .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) } :htext
  .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) } :htext
  .rel.fini       : { *(.rel.fini) } :htext
  .rela.fini      : { *(.rela.fini) } :htext
  .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) } :htext
  .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) } :htext
  .rel.data.rel.ro   : { *(.rel.data.rel.ro*) } :htext
  .rela.data.rel.ro   : { *(.rel.data.rel.ro*) } :htext
  .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) } :htext
  .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) } :htext
  .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) } :htext
  .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) } :htext
  .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) } :htext
  .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) } :htext
  .rel.ctors      : { *(.rel.ctors) } :htext
  .rela.ctors     : { *(.rela.ctors) } :htext
  .rel.dtors      : { *(.rel.dtors) } :htext
  .rela.dtors     : { *(.rela.dtors) } :htext
  .rel.got        : { *(.rel.got) } :htext
  .rela.got       : { *(.rela.got) } :htext
  .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) } :htext
  .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) } :htext
  .rel.plt        : { *(.rel.plt) } :htext
  .rela.plt       : { *(.rela.plt) } :htext
  .init           :
  {
    KEEP (*(.init))
  } :htext =0x90909090
  .plt            : { *(.plt) } :htext
  .text           :
  {
    *(.text .stub .text.* .gnu.linkonce.t.*)
    KEEP (*(.text.*personality*))
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
  } :htext =0x90909090
  .fini           :
  {
    KEEP (*(.fini))
  } :htext =0x90909090
  PROVIDE (__etext = .);
  PROVIDE (_etext = .);
  PROVIDE (etext = .);
  .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) } :htext
  .rodata1        : { *(.rodata1) } :htext
  .eh_frame_hdr : { *(.eh_frame_hdr) } :htext :eh_frame_hdr
  .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) } :htext
  .gcc_except_table   : ONLY_IF_RO { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) } :htext
  /* We don't maintain address congruence here, because saving
   * hugepages is more important than saving executable size. */
  . = ALIGN (0x1000000); /* Align to 16MB (4MB hugepage size, plus some slack in case of larger hugepages in future */
  /* Exception handling  */
  .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) } :hdata
  .gcc_except_table   : ONLY_IF_RW { KEEP (*(.gcc_except_table)) *(.gcc_except_table.*) } :hdata
  /* Thread Local Storage sections  */
  .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) } :hdata
  .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) } :hdata
  /* Ensure the __preinit_array_start label is properly aligned.  We
     could instead move the label definition inside the section, but
     the linker would then create the section even if it turns out to
     be empty, which isn't pretty.  */
  . = ALIGN(64 / 8);
  PROVIDE (__preinit_array_start = .);
  .preinit_array     : { KEEP (*(.preinit_array)) } :hdata
  PROVIDE (__preinit_array_end = .);
  PROVIDE (__init_array_start = .);
  .init_array     : { KEEP (*(.init_array)) } :hdata
  PROVIDE (__init_array_end = .);
  PROVIDE (__fini_array_start = .);
  .fini_array     : { KEEP (*(.fini_array)) } :hdata
  PROVIDE (__fini_array_end = .);
  .ctors          :
  {
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */
    KEEP (*crtbegin*.o(.ctors))
    /* We don't want to include the .ctor section from
       from the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend*.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
  } :hdata
  .dtors          :
  {
    KEEP (*crtbegin*.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend*.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
  } :hdata
  .jcr            : { KEEP (*(.jcr)) } :hdata
  .data.rel.ro : { *(.data.rel.ro.local) *(.data.rel.ro*) } :hdata
  .dynamic        : { *(.dynamic) } :dynamic :hdata
  .got            : { *(.got) } :hdata
  .got.plt        : { *(.got.plt) } :hdata
  .data           :
  {
    *(.data .data.* .gnu.linkonce.d.*)
    KEEP (*(.gnu.linkonce.d.*personality*))
    SORT(CONSTRUCTORS)
  } :hdata
  .data1          : { *(.data1) } :hdata
  _edata = .;
  PROVIDE (edata = .);
  __bss_start = .;
  .bss            :
  {
   *(.dynbss)
   *(.bss .bss.* .gnu.linkonce.b.*)
   *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections.  */
   . = ALIGN(64 / 8);
  } :hdata
  . = ALIGN(64 / 8);
  _end = .;
  PROVIDE (end = .);
  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment       0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /DISCARD/ : { *(.note.GNU-stack) }
}
