/* Linker script for normal executables with text data and BSS in hugepages */
OUTPUT_FORMAT("elf32-powerpc", "elf32-powerpc",
	      "elf32-powerpc")
OUTPUT_ARCH(powerpc:common)
ENTRY(_start)
SEARCH_DIR("/usr/powerpc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
PHDRS
{
  headers PT_PHDR PHDRS ;
  interp PT_INTERP ;
  htext PT_LOAD FILEHDR PHDRS FLAGS (0x00100005);
  hdata PT_LOAD FLAGS (0x00100007);
  dynamic PT_DYNAMIC ;
  note PT_NOTE ;
  gnu_stack PT_GNU_STACK ;
  /* this is the value of PT_GNU_EH_FRAME as defined in
     usr/include/elf.h but binutils does not recognize that identifier
     as it does other PT_ constants. */
  eh_frame_hdr 1685382480 FLAGS (0x00000004);
}
SECTIONS
{
  /* Read-only sections, merged into text segment: */
  __executable_start = 0x10000000; . = 0x10000000 + SIZEOF_HEADERS;
  .interp         : { *(.interp) } :htext :interp
  .note.SuSE      : { *(.note.SuSE) } :htext :note
  .note.ABI-tag   : { *(.note.ABI-tag) } :htext :note
  .hash           : { *(.hash) } :htext
  .dynsym         : { *(.dynsym) } :htext
  .dynstr         : { *(.dynstr) } :htext
  .gnu.version    : { *(.gnu.version) } :htext
  .gnu.version_d  : { *(.gnu.version_d) } :htext
  .gnu.version_r  : { *(.gnu.version_r) } :htext
  .rel.init       : { *(.rel.init) } :htext
  .rela.init      : { *(.rela.init) } :htext
  .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) } :htext
  .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) } :htext
  .rel.fini       : { *(.rel.fini) } :htext
  .rela.fini      : { *(.rela.fini) } :htext
  .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) } :htext
  .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) } :htext
  .rel.data.rel.ro   : { *(.rel.data.rel.ro*) } :htext
  .rela.data.rel.ro   : { *(.rel.data.rel.ro*) } :htext
  .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) } :htext
  .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) } :htext
  .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) } :htext
  .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) } :htext
  .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) } :htext
  .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) } :htext
  .rel.ctors      : { *(.rel.ctors) } :htext
  .rela.ctors     : { *(.rela.ctors) } :htext
  .rel.dtors      : { *(.rel.dtors) } :htext
  .rela.dtors     : { *(.rela.dtors) } :htext
  .rel.got        : { *(.rel.got) } :htext
  .rela.got       : { *(.rela.got) } :htext
  .rela.got1           : { *(.rela.got1) } :htext
  .rela.got2           : { *(.rela.got2) } :htext
  .rel.sdata      : { *(.rel.sdata .rel.sdata.* .rel.gnu.linkonce.s.*) } :htext
  .rela.sdata     : { *(.rela.sdata .rela.sdata.* .rela.gnu.linkonce.s.*) } :htext
  .rel.sbss       : { *(.rel.sbss .rel.sbss.* .rel.gnu.linkonce.sb.*) } :htext
  .rela.sbss      : { *(.rela.sbss .rela.sbss.* .rela.gnu.linkonce.sb.*) } :htext
  .rel.sdata2     : { *(.rel.sdata2 .rel.sdata2.* .rel.gnu.linkonce.s2.*) } :htext
  .rela.sdata2    : { *(.rela.sdata2 .rela.sdata2.* .rela.gnu.linkonce.s2.*) } :htext
  .rel.sbss2      : { *(.rel.sbss2 .rel.sbss2.* .rel.gnu.linkonce.sb2.*) } :htext
  .rela.sbss2     : { *(.rela.sbss2 .rela.sbss2.* .rela.gnu.linkonce.sb2.*) } :htext
  .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) } :htext
  .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) } :htext
  .rel.plt        : { *(.rel.plt) } :htext
  .rela.plt       : { *(.rela.plt) } :htext
  .init           :
  {
    KEEP (*(.init))
  } :htext =0
  .text           :
  {
    *(.text .stub .text.* .gnu.linkonce.t.*)
    KEEP (*(.text.*personality*))
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
    *(.glink)
  } :htext =0
  .fini           :
  {
    KEEP (*(.fini))
  } :htext =0
  PROVIDE (__etext = .);
  PROVIDE (_etext = .);
  PROVIDE (etext = .);
  .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) } :htext
  .rodata1        : { *(.rodata1) } :htext
  .sdata2         :
  {
    PROVIDE (_SDA2_BASE_ = 32768);
    *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
  } :htext
  .sbss2          : { *(.sbss2 .sbss2.* .gnu.linkonce.sb2.*) } :htext
  .eh_frame_hdr : { *(.eh_frame_hdr) } :htext :eh_frame_hdr
/*  .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) } :htext */
/*  .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table .gcc_except_table.*) } :htext */

  /* We don't maintain address congruence here, because saving
   * hugepages is more important than saving executable size. */
  /* Just move to the very next hugepage, rather than using a guard
   * page, because for ppc32 binaries we can't separate the text and
   * PLT by >32MB */
  . = ALIGN (0x1000000);
  /* Exception handling  */
  .eh_frame       : /*ONLY_IF_RW*/ { KEEP (*(.eh_frame)) } :hdata
  .gcc_except_table   : /*ONLY_IF_RW*/ { *(.gcc_except_table .gcc_except_table.*) } :hdata
  /* Thread Local Storage sections  */
  .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) } :hdata
  .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) } :hdata
  .preinit_array     :
  {
    PROVIDE /*_HIDDEN*/ (__preinit_array_start = .);
    KEEP (*(.preinit_array))
    PROVIDE /*_HIDDEN*/ (__preinit_array_end = .);
  } :hdata
  .init_array     :
  {
     PROVIDE /*_HIDDEN*/ (__init_array_start = .);
     KEEP (*(SORT(.init_array.*)))
     KEEP (*(.init_array))
     PROVIDE /*_HIDDEN*/ (__init_array_end = .);
  } :hdata
  .fini_array     :
  {
    PROVIDE /*_HIDDEN*/ (__fini_array_start = .);
    KEEP (*(.fini_array))
    KEEP (*(SORT(.fini_array.*)))
    PROVIDE /*_HIDDEN*/ (__fini_array_end = .);
  } :hdata
  .ctors          :
  {
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */
    KEEP (*crtbegin*.o(.ctors))
    /* We don't want to include the .ctor section from
       from the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend*.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
  } :hdata
  .dtors          :
  {
    KEEP (*crtbegin*.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend*.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
  } :hdata
  .jcr            : { KEEP (*(.jcr)) } :hdata
  .data.rel.ro : { *(.data.rel.ro.local) *(.data.rel.ro*) } :hdata
  .got1           : { *(.got1) } :hdata
  .got2           : { *(.got2) } :hdata
  .dynamic        : { *(.dynamic) } :dynamic :hdata
  .got            :  { *(.got.plt .got) } :hdata
/*  . = DATA_SEGMENT_RELRO_END (0, .); */
  .data           :
  {
    *(.data .data.* .gnu.linkonce.d.*)
    KEEP (*(.gnu.linkonce.d.*personality*))
    SORT(CONSTRUCTORS)
  } :hdata
  .data1          : { *(.data1) } :hdata
  /* We want the small data sections together, so single-instruction offsets
     can access them all, and initialized data all before uninitialized, so
     we can shorten the on-disk segment size.  */
  .sdata          :
  {
    PROVIDE (_SDA_BASE_ = 32768);
    *(.sdata .sdata.* .gnu.linkonce.s.*)
  } :hdata
  _edata = .; PROVIDE (edata = .);
  __bss_start = .;
  .sbss           :
  {
    PROVIDE (__sbss_start = .); PROVIDE (___sbss_start = .);
    *(.dynsbss)
    *(.sbss .sbss.* .gnu.linkonce.sb.*)
    *(.scommon)
    PROVIDE (__sbss_end = .); PROVIDE (___sbss_end = .);
  } :hdata
  .plt            :  { *(.plt) } :hdata
  .bss            :
  {
   *(.dynbss)
   *(.bss .bss.* .gnu.linkonce.b.*)
   *(COMMON)
   /* 
    * Align here to ensure that the .bss section occupies space up to
    * _end. Additionally (for huge pages) align to a segment boundary.
    * This ensures that no normal page mappings will be created in this
    * segment (after the bss) which could interfere with remapping.
    */
   . = ALIGN(256*1024*1024);
  } :hdata
  _end = .;
  PROVIDE (end = .);
  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment       0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /DISCARD/	: { *(.fixup) }
  /DISCARD/ : { *(.note.GNU-stack) }
}
