C
C
C  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
C
C  This program is free software; you can redistribute it and/or modify it
C  under the terms of version 2.1 of the GNU Lesser General Public License 
C  as published by the Free Software Foundation.
C
C  This program is distributed in the hope that it would be useful, but
C  WITHOUT ANY WARRANTY; without even the implied warranty of
C  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
C
C  Further, this software is distributed without any warranty that it is
C  free of the rightful claim of any third person regarding infringement 
C  or the like.  Any license provided herein, whether implied or 
C  otherwise, applies only to this software file.  Patent licenses, if
C  any, provided herein do not apply to combinations of this program with 
C  other software, or any other product whatsoever.  
C
C  You should have received a copy of the GNU Lesser General Public 
C  License along with this program; if not, write the Free Software 
C  Foundation, Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, 
C  USA.
C
C  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
C  Mountain View, CA 94043, or:
C
C  http://www.sgi.com
C
C  For further information regarding this notice, see:
C
C  http://oss.sgi.com/projects/GenInfo/NoticeExplan
C
C


**************************************************************************
*
*       This is the guts of the routines which handles EOSHIFT on dim 6
*	for all type arrays of rank 7.
*
**************************************************************************

	if (shflag) then
	    lshft = mod (shftval, sx(6))
	    if (lshft .ne. 0) then
		if (lshft .lt. 0) then
		    lshft = lshft + sx(6)
		endif
		rshft = sx(6) - lshft
cdir$	do shared (i1,i2,i3,i4,i5,i7,i6) on source(i1,i2,i3,i4,i5,i6,i7)
		do i1 = 1, sx(1)
		do i2 = 1, sx(2)
		do i3 = 1, sx(3)
		do i4 = 1, sx(4)
		do i5 = 1, sx(5)
		do i7 = 1, sx(7)
		    do i6 = 1, sx(6)
			if (i6 .le. lshft) then
			    result(i1,i2,i3,i4,i5,i6+rshft,i7) =
     &				source(i1,i2,i3,i4,i5,i6,i7)
			else
			    result(i1,i2,i3,i4,i5,i6-lshft,i7) =
     &				source(i1,i2,i3,i4,i5,i6,i7)
			endif
		    enddo
	        enddo
	        enddo
	        enddo
	        enddo
		enddo
		enddo
	    else
cdir$	do shared (i1,i2,i3,i4,i5,i6,i7) on source(i1,i2,i3,i4,i5,i6,i7)
		do i1 = 1, sx(1)
		do i2 = 1, sx(2)
		do i3 = 1, sx(3)
		do i4 = 1, sx(4)
		do i5 = 1, sx(5)
		do i6 = 1, sx(6)
		do i7 = 1, sx(7)
		    result(i1,i2,i3,i4,i5,i6,i7) =
     &			source(i1,i2,i3,i4,i5,i6,i7)
		enddo
		enddo
		enddo
		enddo
		enddo
		enddo
		enddo
	    endif
	else
cdir$	do shared (i1,i2,i3,i4,i5,i7,i6) on source(i1,i2,i3,i4,i5,i6,i7)
	    do i1 = 1, sx(1)
	    do i2 = 1, sx(2)
	    do i3 = 1, sx(3)
	    do i4 = 1, sx(4)
	    do i5 = 1, sx(5)
	    do i7 = 1, sx(7)
		do i6 = 1, sx(6)
		    lshft = mod(shift(i1,i2,i3,i4,i5,i7),sx(6))
		    if (lshft .ne. 0) then
			if (lshft .lt. 0) then
			    lshft = lshft + sx(6)
			endif
			if (i6 .le. lshft) then
			    rshft = (sx(6) - lshft)
			    result(i1,i2,i3,i4,i5,i6+rshft,i7) =
     &				source(i1,i2,i3,i4,i5,i6,i7)
			else
			    result(i1,i2,i3,i4,i5,i6-lshft,i7) =
     &				source(i1,i2,i3,i4,i5,i6,i7)
			endif
		    else
			result(i1,i2,i3,i4,i5,i6,i7) =
     &				source(i1,i2,i3,i4,i5,i6,i7)
		    endif
		enddo
	    enddo
	    enddo
	    enddo
	    enddo
	    enddo
	    enddo
	endif
