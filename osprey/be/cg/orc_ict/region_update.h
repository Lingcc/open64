/*
  Copyright (C) 2000-2003, Institute of Computing Technology, Chinese Academy of Sciences
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:
  
  Redistributions of source code must retain the above copyright notice, this list
  of conditions and the following disclaimer. 

  Redistributions in binary form must reproduce the above copyright notice, this list
  of conditions and the following disclaimer in the documentation and/or other materials
  provided with the distribution. 

  Neither the name of the owner nor the names of its contributors may be used to endorse or
  promote products derived from this software without specific prior written permission. 

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
 
//-*-c++-*-
//=============================================================================
//
// Module: region_update.h
// $Revision: 1.1.1.1 $
// $Date: 2005/10/21 19:00:00 $
// $Author: marcel $ 
// $Source: /proj/osprey/CVS/open64/osprey1.0/be/cg/orc_ict/region_update.h,v $
//
//=============================================================================

#ifndef  region_update_INCLUDED
#define  region_update_INCLUDED

//============================================================================
//
//   Class Name: REGION_LOOP_UPDATE_MEM
//
//   Base Class: <none>
//
//   Derived Class: REGION_LOOP_UPDATE
//
//   Class Description: 
//
//   Note:  
//
//============================================================================

class REGION_LOOP_UPDATE_MEM {

protected:
    MEM_POOL  _m;

    REGION_LOOP_UPDATE_MEM() {
        MEM_POOL_Initialize( &_m, "REGION_LOOP_UPDATE_MEM", true );
        MEM_POOL_Push( &_m );
      }

    ~REGION_LOOP_UPDATE_MEM() {
        MEM_POOL_Pop( &_m );
        MEM_POOL_Delete(&_m );
    }
};


//============================================================================
//
//   Class Name: REGION_LOOP_UPDATE
//
//   Base Class: REGION_LOOP_UPDATE_MEM
//
//   Derived Class: <none>
//
//   Class Description: 
//
//   Note:  
//
//============================================================================   

class REGION_LOOP_UPDATE :public REGION_LOOP_UPDATE_MEM {

    typedef mempool_allocator<BB *>     BB_ALLOC;
    typedef std::vector<BB *, BB_ALLOC>      BB_CONTAINER;
    typedef BB_CONTAINER::iterator      BB_ITER;

private:
    REGION_TREE     *_region_tree;
    BB              *_first_bb;
    BB_CONTAINER    _bbs_not_in_loop;
    BB_CONTAINER    _loop_bbs;// all bbs in loop and new generated by loop opt

    void        Find_Loop_BBs();
    void        Set_No_Further_Optimization(REGION *par);

public:
    REGION_LOOP_UPDATE(REGION_TREE *tree, BB *first_bb):_bbs_not_in_loop(BB_ALLOC(&_m)){
        _region_tree = tree;
        _first_bb = first_bb;
    }

    ~REGION_LOOP_UPDATE(){};


    // record all bbs which are not in loop into _bbs_not_in_loop
    void Record_Loop_Region_Boundary(LOOP_REGION *loop);

    REGION *Del_Loop_Region(LOOP_REGION *loop);

    void Rebuild_Loop_Region(REGION *par, BOOL succ);

};

extern void *Record_And_Del_Loop_Region(LOOP_DESCR *loop, void *tmp, BOOL);
extern void Rebuild_Loop_Region(void *tmp_loop_update, void *tmp_loop_rgn);
    
// if can moved from src_bb to target_bb
extern BOOL  Can_Be_Moved(BB * src_bb, BB * target_bb); 

#endif
